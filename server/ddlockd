#!/usr/bin/perl
#
# Danga's Distributed Lock Daemon
#
# Copyright 2004, Danga Interactive
# Copyright 2005-2006, Six Apart, Ltd.
#
# Authors:
#   Brad Fitzpatrick <brad@danga.com>
#   Jonathan Steinert <jsteinert@sixapart.com>
#
# License:
#   terms of Perl itself.
#

use strict;
use Getopt::Long;
use Carp;
use Danga::Socket;
use IO::Socket::INET;
use POSIX ();

## the storage load intervals: %IVs = ( time_iv => load, ... )
our %IVs = ();
## haw many load buckets we want
our $Bucket_qty = 100; #
## the total duration of load measurement
our $Total_duration = 60 * 5; # 5mn
## the duration handled by one bucket
our $IV_duration = int($Total_duration / $Bucket_qty); 
## how many bucket held before we purge the old ones
our $Bucket_limit =  2 * $Bucket_qty;

use vars qw($DEBUG);
$DEBUG = 0;

my (
    $daemonize,
    $nokeepalive,
    $hostname,
    $table,
   );
my $conf_port = 7002;
my $lock_type = "internal";

Getopt::Long::GetOptions(
    'd|daemon'       => \$daemonize,
    'p|port=i'       => \$conf_port,
    'debug=i'        => \$DEBUG,
    'n|no-keepalive' => \$nokeepalive,
    't|type=s'       => \$lock_type,
    'h|hostname=s'   => \$hostname,
    'T|table=s'  => \$table,
   );

# Statistics counters
my $lock_successes = 0;
my $lock_failures  = 0;

my $client_class;
my @client_options;
if ($lock_type eq 'internal') {
    $client_class = "DDLockd::Client::Internal";
}
elsif($lock_type eq 'dlmfs') {
    $client_class = "DDLockd::Client::DLMFS";
}
elsif($lock_type eq 'dbi') {
    length( $hostname ) or die( "-h (--hostname) must be included with a hostname in dbi mode\n" );
    length( $table ) or die( "-T (--table) must be included with a table name in dbi mode\n" );
    $client_class = "DDLockd::Client::DBI";
    @client_options = ( $hostname, $table );
}
else {
    die( "Unknown lock type of '$lock_type' specified.\n" );
}

eval "use $client_class; 1"
    or die "Couldn't load class '$client_class' to handle lock type '$lock_type': $@\n";

$client_class->_setup( @client_options );

daemonize() if $daemonize;

use Socket qw(IPPROTO_TCP SO_KEEPALIVE TCP_NODELAY SOL_SOCKET);

# Linux-specific:
use constant TCP_KEEPIDLE  => 4; # Start keeplives after this period
use constant TCP_KEEPINTVL => 5; # Interval between keepalives
use constant TCP_KEEPCNT   => 6; # Number of keepalives before death

$SIG{'PIPE'} = "IGNORE";  # handled manually

# establish SERVER socket, bind and listen.
my $server = IO::Socket::INET->new(LocalPort => $conf_port,
                                   Type      => SOCK_STREAM,
                                   Proto     => IPPROTO_TCP,
                                   Blocking  => 0,
                                   Reuse     => 1,
                                   Listen    => 10 )
    or die "Error creating socket: $@\n";

# Not sure if I'm crazy or not, but I can't see in strace where/how
# Perl 5.6 sets blocking to 0 without this.  In Perl 5.8, IO::Socket::INET
# obviously sets it from watching strace.
IO::Handle::blocking($server, 0);

my $accept_handler = sub {
    my $csock = $server->accept();
    return unless $csock;

    printf("Listen child making a Client for %d.\n", fileno($csock))
        if $DEBUG;

    IO::Handle::blocking($csock, 0);
    setsockopt($csock, IPPROTO_TCP, TCP_NODELAY, pack("l", 1)) or die;

    # Enable keep alive
    unless ( $nokeepalive ) {
        (setsockopt($csock, SOL_SOCKET, SO_KEEPALIVE,  pack("l", 1)) &&
         setsockopt($csock, IPPROTO_TCP, TCP_KEEPIDLE,  pack("l", 30)) &&
         setsockopt($csock, IPPROTO_TCP, TCP_KEEPCNT,   pack("l", 10)) &&
         setsockopt($csock, IPPROTO_TCP, TCP_KEEPINTVL, pack("l", 30)) &&
         1
        ) || die "Couldn't set keep-alive settings on socket (Not on Linux?)";
    }

    my $client = $client_class->new($csock);
    $client->watch_read(1);
};

DDLockd::Client->OtherFds(fileno($server) => $accept_handler);
DDLockd::Client->EventLoop();

sub daemonize {
    my($pid, $sess_id, $i);

    ## Fork and exit parent
    if ($pid = fork) { exit 0; }

    ## Detach ourselves from the terminal
    croak "Cannot detach from controlling terminal"
        unless $sess_id = POSIX::setsid();

    ## Prevent possibility of acquiring a controling terminal
    $SIG{'HUP'} = 'IGNORE';
    if ($pid = fork) { exit 0; }

    ## Change working directory
    chdir "/";

    ## Clear file creation mask
    umask 0;

    ## Close open file descriptors
    close(STDIN);
    close(STDOUT);
    close(STDERR);

    ## Reopen stderr, stdout, stdin to /dev/null
    open(STDIN,  "+>/dev/null");
    open(STDOUT, "+>&STDIN");
    open(STDERR, "+>&STDIN");
}

# Local Variables:
# mode: perl
# c-basic-indent: 4
# indent-tabs-mode: nil
# End:
